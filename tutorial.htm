<title>Tutorial</title>
<link rel="stylesheet" type="text/css" href="kati.css">

<body>
	<div class="main">
		<h1><a href="wiki.cgi?action=SEARCH&amp;word=A+Tutorial">A Tutorial</a></h1>
		<div class="header">
			<ul>
				<li><a href="#p0">これは何?</a></li>
				<li><a href="#p1">こんにちは，世界!</a></li>
				<li><a href="#p2">はじめの一歩</a></li>
				<li><a href="#p3">Threadを作る方法</a></li>
				<li><a href="#p4">どうやってるの?</a></li>
				<li><a href="#p5">scope ― 何が見えてますか?</a></li>
				<li><a href="#p6">ちょっとした，最大の秘密</a></li>
				<li><a href="#p7">もっと先へ</a></li>
			</ul>
			<hr>
		</div>
		<div class="day">
			<div class="body">
				<div class="section">
					<h2><a name="p0">これは何?</a></h2>
					<p>Concurrent.ThreadはJavaScriptの上に多重Thread環境を作り出すJavaScript機能集合である。Threadなんかなくても，今ある機能で全部書けるって? そう，その通り! Concurrent.Threadは何も新しいことを可能にはしない。その代わりに，今まで「可能」であったことを少しだけ(あるいはとっても)「簡単」にしてくれる。</p>
					<p>Threadなんかいらないよ，という凄腕hackerの君は残念，また別の機会にお会いしましょう。Threadがあったら，と少しでも思ったことのあるそこのアナタはおめでとう。――ようこそ，Concurrent.Threadの世界へ。</p>
					<h2><a name="p1">こんにちは，世界!</a></h2>
					<p>何はともあれ，まずは使ってみるとしよう。最初に書くprogramといえば，古来よりコレと決まっている。</p>
					<pre>&lt;html&gt;&lt;body&gt;
	&lt;script type="text/javascript" src="Concurrent.Thread.Compiler.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript"&gt;
		function hello(){
			document.body.innerHTML+="H";
			document.body.innerHTML+="e";
			document.body.innerHTML+="l";
			document.body.innerHTML+="l";
			document.body.innerHTML+="o";
			document.body.innerHTML+=",";
			document.body.innerHTML+=" ";
			document.body.innerHTML+="w";
			document.body.innerHTML+="o";
			document.body.innerHTML+="r";
			document.body.innerHTML+="l";
			document.body.innerHTML+="d";
			document.body.innerHTML+="!";
		}
		Concurrent.Thread.create(hello)
	&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;</pre>
					<p>ほらできた!簡単でしょ?</p>
					<p>でも，ここでは何も面白いことは起こってはいない。それではこうしてみよう。</p>
					<pre>&lt;html&gt;
&lt;body&gt;
	&lt;script type="text/javascript" src="Concurrent.Thread.Compiler.js"&gt;&lt;/script&gt;
	&lt;script type="text/javascript"&gt;
		function hello(){
			document.body.innerHTML+="H";Concurrent.Thread.yield();
			document.body.innerHTML+="e";Concurrent.Thread.yield();
			document.body.innerHTML+="l";Concurrent.Thread.yield();
			document.body.innerHTML+="l";Concurrent.Thread.yield();
			document.body.innerHTML+="o";Concurrent.Thread.yield();
			document.body.innerHTML+=",";Concurrent.Thread.yield();
			document.body.innerHTML+=" ";Concurrent.Thread.yield();
			document.body.innerHTML+="w";Concurrent.Thread.yield();
			document.body.innerHTML+="o";Concurrent.Thread.yield();
			document.body.innerHTML+="r";Concurrent.Thread.yield();
			document.body.innerHTML+="l";Concurrent.Thread.yield();
			document.body.innerHTML+="d";Concurrent.Thread.yield();
			document.body.innerHTML+="!";Concurrent.Thread.yield();
		}
		Concurrent.Thread.create(hello);
		Concurrent.Thread.create(hello);
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
					<p>今度は少しばかり興味深い結果になったのではないかな? 同じ文字が2つずつ重なって表示されているはずだ(もしそうなっていなければ，あなたのbrowserには対応していないということだ。申し訳ない。互換性についての項を確認して欲しい)。だが，我々はどこにも「"H"を2個続けて打て」などということは書いていない。これはつまり，関数helloを同時に2つ実行しているのだ。これが多分，あなたが欲しかったものでしょう?(そうじゃなかったらゴメンなさい)</p>
					<h2><a name="p2">はじめの一歩</a></h2>
					<p>先ほどのprogramについて解説していこう。</p>
					<p>最初に述べた通りConcurrent.Threadは機能集合である。そのため，使用するためにはまずそれを読み込まなければならない。上の例では3行目がそうである。</p>
					<pre>&lt;script type="text/javascript" src="Concurrent.Thread.Compiler.js"&gt;&lt;/script&gt;
</pre>
					<p>もちろん，file名はあなたがfileを保存した時の名前にするように。これで使う準備は完了である。</p>
					<p>後は普通にJavaScriptを書けばよい。ただし，多重Threadが使いたければ機能集合が提供するAPIを用いなければならない。次の行のようにだ。</p>
					<pre>Concurrent.Thread.create(hello);
</pre>
					<p>こうすると，関数helloが新しく作られた別のThreadの上で実行される。複数を同時に実行したければ，create methodをたくさん並べればいい。</p>
					<pre>Concurrent.Thread.create(hello);
Concurrent.Thread.create(hello);
Concurrent.Thread.create(hello);
.
.
.
</pre>
					<p>これで今日からあなたもThread programerだ。</p>
					<p>2つめの例で使われているyield methodは，多くのJava programerの予想通り(そしてほとんど全てのRuby programerの期待を裏切って)，現在実行中のThreadの実行権限を明示的に明け渡すものである。</p>
					<p>あえて云う必要もないかもしれないが，複数のJavaScript codeが並行に実行されているといっても，実際にある瞬間に実行できるcodeは1つだけである。Threadは1つしかない実行権を高速に渡しあうことで，人間からは同時に動いているように見せかけているのである。Threadは一定の短い時間のあいだ実行権を保持し，他の仕事に邪魔されることなく実行を続ける。この短い時間のことをtime sliceと呼ぶ。上で述べたyieldは，time sliceを使い切る前に明示的に実行権を次に譲るためのものである。</p>
					<p>yieldを使う典型的な場面は，次のように世界がある状態になるまで待つ必要がある時だ。</p>
					<pre>while(!allsRightWithTheWorld())Concurrent.Thread.yield()</pre>
					<p>yieldを使わずに，ただ，</p>
					<pre>while(!allsRightWithTheWorld())</pre>
					<p>と書いた時の違いは，CPUを無駄遣いしないということである。後者はtime sliceを使い切るまで何度も目的の状態になったかを確認するが，これは概ね無駄な仕事である。何故なら，このThreadがtime sliceを使い切るまで他のThreadは仕事をすることができないので，他の誰かが世界の状態を変えることはできないからだ。</p>
					<p>これを用いた役に立つ慣わしの1つに，browserがbody要素を生成するまで処理を遅延するというものがある。</p>
					<pre>Concurrent.Thread.create(function(){
	while(!document.body)Concurrent.Thread.yield();
	initialize()
})</pre>
					<p>こうすると，HTMLのbody要素を必要とするような初期化処理を，body要素が使えるようになるその時まで遅らせることができる。特筆すべきなのは，body要素が使えるようになるのは，一般的には，onload event handlerが呼ばれるよりもずっと早い段階だということだ。だからapplicationによっては，onloadを用いるよりも早い段階で利用者が機能を使えるようにできる。この方法は，whileの条件式を変えれば他にももっと応用できるはずだ。</p>
					<p>一定時間の経過を待つためにはyieldよりもsleep methodの方が向いている。sleepを呼び出したThreadは即座に一定時間の休眠状態に入る。これは目覚まし時計を設定して寝るのと似ている。休眠時間はmili秒単位で指定する:</p>
					<pre>Concurrent.Thread.sleep(10000)</pre>
					<p>この例では，10秒後に目覚ましが鳴るというわけだ。そして実のところ，yieldは次と同じ意味だったりする。</p>
					<pre>Concurrent.Thread.sleep(0)</pre>
					<p>これは眠りに入った直後に目覚ましが鳴るということだ。要するにyieldとは，一瞬だけうたた寝するぞ，といっているようなものだ。そして一瞬の隙をついて，他のThreadはその実行権を奪うことができる。</p>
					<p>眠っているThreadを，目覚ましがなる前に叩き起こしたくなる時があるだろう，そんな時にはnotify methodが役に立つ。notify methodは他のThreadの上に例外を発生させるmethodで，対象のThreadが眠っていた場合は即座にその実行が再開される。</p>
					<pre>th.notify("morning!")</pre>
					<p>ここでの変数thにはThread Objectが入っていると考えて欲しい。Thread Objectについては次節で説明するが，create methodの戻り値であるとだけ言っておこう。</p>
					<p>時には他の誰かが起こしてくれるまでずっと眠っていたくなる時もあるだろう。そんな時は，sleepの代わりにstop methodを用いればよい。stopはsleepと同じように，呼び出した瞬間に眠りに入るのだが，こちらは目覚ましを設定せずに寝る。そして自分から起きるようなことはない(なんて自堕落な野郎だ)! だから，stopを使う時の基本的な形は次の通りである。</p>
					<pre>try{
	Concurrent.Thread.stop()
}catch(e){
// ここから実行が再開される
}</pre>
					<p>後は誰かが起こしてくれるのをじっと待つだけである。そのまま誰にも起こされなかったらどうなるかって? その時はそのまま緩やかに死に向かうだけだ。memory leakの心配をしているあなたに朗報をお届けしよう。stopしたまま忘れ去られたThreadが参照しているmemoryは，処理系のごみ回収者によって適宜回収されるはずだ。だから安心して欲しい</p>
					<h2><a name="p3">Threadを作る方法</a></h2>
					<p>Threadを作る方法は2つある。1つは最初の例でも使われていたcreate methodに関数を渡すことだ。create methodは新しいThreadを作成し，その上で渡された関数の実行を開始する。関数に引数を渡したければ，実行したい関数に続けて書けばよい:</p>
					<pre>Concurrent.Thread.create(function fib(n){
	return n&lt;2?1:fib(n-1)+fib(n-2)
},100)</pre>
					<p>もう1つの方法は，関数Objectに追加されているasync methodを用いることだ:</p>
					<pre>f.async(this_val,args)</pre>
					<p>ただし，この場合のfは，compile methodの戻り値として得られた関数でなければならない。compile methodについては，次節で説明する。</p>
					<p>async methodの優れた点は，呼び出した先でのthis値を指定できることである。その意味でこれは，JavaScript組み込みのapply methodと似ている。そのため，渡すべき引数も同じく，this値と引数をまとめた配列なのである。</p>
					<p>createもasyncも，その戻り値としてThread Objectを返す。Thread Objectを用いることで，新しく作られたThreadに対して操作をすることができる。例えば，上であげたnotify methodはその例である。Thread Objectのmethodして他には，joinがある。これは対象Threadの実行が終了するまで待つというものである。例えば次，</p>
					<pre>var th1=Concurrent.Thread.create(f);
var th2=Concurrent.Thread.create(g);
var rv1=th1.join();
var rv2=th2.join();</pre>
					<p>これはfとg、2つの関数を並行に実行し，両方の実行が終了するのを待つというものだ。joinの戻り値は実行した関数の戻り値で，この場合は変数rv1，rv2にそれぞれ関数f，gの結果が得られるというわけだ。</p>
					<p>joinによって待機状態にある時も，sleepやstopと同様に，他のThreadから notifyを呼ばれることで即座に実行を再開することができる。もちろんその時には，例外が補足されたcatch節から実行が再開される。</p>
					<h2><a name="p4">どうやってるの?</a></h2>
					<p>ここではConcurrent.Threadが，どうやって多重Threadを実現しているかについてお話したいと思う。既に興味津々の人もいらっしゃるだろう(と願いたい)一方で，内部事情に興味はないという人もいらっしゃるだろう。しかし，興味のない人も1つだけ覚えておいて欲しい。それは，Concurrent.Threadがcode変換を利用しているということだ。つまり，あなたが別Threadで実行しようとしてcreate methodに渡した関数と，実際に実行される関数は全くの別物なのだ。ただ，その「別物関数」は(概ね)あなたの期待通りに動いてくれるはずだ。これさえ心に留めておいてくれれば，この節の残りの部分は読み飛ばしてもらって構わない。</p>
					<p>内部事情に興味を持ってくれた人たちのために，もう少しだけ説明させてもらおう。Concurrent.Threadはcreate methodに渡された関数を，UI Threadをこまめに解放するようなprogramへと書き換えたものを作り，それを実行する。書き換えの大まかな想像としては，programを「細切れ」にしてその「切れ目」に中断と再開のためのcodeを挟み込む感じだ。JavaScriptは関数のtoString methodを用いることで，実行時に関数の算譜を得ることができるので，これを用いてprogramを変換し，変換結果のprogram(算譜)をevalで評価してやることで，まんまと実行時にcode変換ができてしまうというわけである。詳しいことは導入部の範囲を逸脱するため割愛させてもらうが，より詳しく知りたい人は，本導入部の末尾から参照されている文書を参照されたい。</p>
					<p>変換と一言でいっても，programを構文解析し，構文木を操作した上で，またJavaScriptを組み直すというようなことを行うわけで，これは決して軽い処理ではない。こんなことをcreate methodを呼ぶたびに行っていては，いくらCPUがあっても足りない。そのため，まさにこの変換だけを行うためにcompile methodが用意されている。compileはcode変換を行い，その結果として関数を返す。変換結果の関数には前節で紹介したasync methodを呼び出すことができ，これによって新しいThreadを作ることができる。また，変換結果をこれまで通りcreate methodに渡すことでも同じことができる。もちろん，この場合にも再度変換が行われることはない。従って，次のようなcreate methodの呼び出しは，</p>
					<pre>Concurrent.Thread.create(f,a1,a2,...)
</pre>
					<p>下のcompileとasyncを使ったcodeの省略形である。</p>
					<pre>Concurrent.Thread.compile(f).async(null,[a1,a2,...])
</pre>
					<h2><a name="p5">scope ― 何が見えてますか?</a></h2>
					<p>前節で，create methodに渡した関数と実際に実行される関数は全くの別物だと書いたが，これが大いに問題になる場合がある。Concurrent.Threadは本来の関数の意味をなるべく変えないよう注意深くcode変換を行うが，自由変数だけはどうにもならないのだ。次の例を見てみよう。</p>
					<pre>function f(x,y){
	Concurrent.Thread.create(function(){
		document.write(x+y)
	})
}</pre>
					<p>これを f(1,2) と呼び出すと，3が表示されて欲しいと思うだろうが，実際にはそうはならない。これには変換された関数が評価される場所が関係している。compile methodは変換結果の関数を最上位に近い所でevalの評価にかける。だから，変換前に自由変数であったものは変換後の関数では概ね大域変数を指すことになってしまう。つまり，上の例は大体次のcodeと同じである。</p>
					<pre>function g(){
	document.write(x+y)
}
function f(x,y){
	Concurrent.Thread.create(g)
}
</pre>
					<p>これではあまりにも不便なので，もちろん逃げ道を用意してある。それはprepare methodを利用することである。</p>
					<p>prepare methodは引数に渡された関数のcode変換を行い，その結果のprogramの算譜(文字列)を返す。ということはつまり，compile methodは次のcodeの省略形なのである。</p>
					<pre>eval(Concurrent.Thread.prepare(f))
</pre>
					<p>しかし自分で直接evalを呼んだ場合には，変換後の関数の中でもそこでのlocal変数に接触できるという点が大きく異なる。よって先ほどの例は，次のように修正することで意図した通りに動くようになる。</p>
					<pre>function f(x,y){
	eval(Concurrent.Thread.prepare(function(){
		document.write(x+y)
	})).async()
}</pre>
